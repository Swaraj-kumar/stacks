// A Stack based C++ program to find next
// greater element from left and right for all array elements
// in same order as input.

#include <bits/stdc++.h>
using namespace std;

void printNGEToRight(int arr[], int n,	vector<int>&res)
{
	stack<int> s;
	for (int i = n - 1; i >= 0; i--) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() > arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() <= arr[i])
    {
        while(s.size() > 0 && s.top() <= arr[i])
        {
            s.pop();
        }
          if(s.size()==0)res.push_back(-1);
          else
          res.push_back(s.top());
    }
    s.push(arr[i]);
	}
	//reverse resultant vector to get the output
	reverse(res.begin(),res.end());
}


//next greater eleemnt from left
void printNGEToLeft(int arr[],int n,vector<int>&res)
{
    
	stack<int> s;
	for (int i=0;i<n;i++) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() > arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() <= arr[i])
    {
        while(s.size() > 0 && s.top() <= arr[i])
        {
            s.pop();
        }
        if(s.size()==0)res.push_back(-1);
        else
        res.push_back(s.top());
    }
    s.push(arr[i]);
	}
}

//Display function
void display(int arr[],vector<int>&res,int n)
{
	for (int i = 0; i < n; i++)
	cout << arr[i] << " --> " << res[i] << endl;
}

int main()
{
	int arr[] = {1,3,2,4};
	int n = sizeof(arr) / sizeof(arr[0]);

	// Function call
	vector<int>res;
	printNGEToRight(arr, n,res);
	display(arr,res,n);
	
// 	printNGEToLeft(arr,n,res);
// 	display(arr,res,n);
	
	return 0;
}
