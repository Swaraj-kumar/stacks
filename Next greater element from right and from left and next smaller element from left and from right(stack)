#include <bits/stdc++.h>
using namespace std;

// print Next greater Element To Right

void printNGEToRight(int arr[], int n,	vector<int>&res)
{
	stack<int> s;
	for (int i = n - 1; i >= 0; i--) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() > arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() <= arr[i])
    {
        while(s.size() > 0 && s.top() <= arr[i])
        {
            s.pop();
        }
          if(s.size()==0)res.push_back(-1);
          else
          res.push_back(s.top());
    }
    s.push(arr[i]);
	}
	//reverse resultant vector to get the output
	reverse(res.begin(),res.end());
}


// print Next greater Element To left

void printNGEToLeft(int arr[],int n,vector<int>&res)
{
    
	stack<int> s;
	for (int i=0;i<n;i++) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() > arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() <= arr[i])
    {
        while(s.size() > 0 && s.top() <= arr[i])
        {
            s.pop();
        }
        if(s.size()==0)res.push_back(-1);
        else
        res.push_back(s.top());
    }
    s.push(arr[i]);
	}
}

// print Next smaller Element To left

void printNSEToLeft(int arr[],int n,vector<int>&res)
{
	stack<int> s;
	for (int i=0;i<n;i++) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() < arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() >= arr[i])
    {
        while(s.size() > 0 && s.top() >= arr[i])
        {
            s.pop();
        }
        if(s.size()==0)res.push_back(-1);
        else
        res.push_back(s.top());
    }
    s.push(arr[i]);
	}
}


// print Next smaller Element To Right

void printNSEToRight(int arr[], int n,	vector<int>&res)
{
	stack<int> s;
	for (int i = n - 1; i >= 0; i--) {
		/* if stack is not empty, then
		pop an element from stack.
		If the popped element is smaller
		than next, then
		a) print the pair
		b) keep popping while elements are
		smaller and stack is not empty */
    if(s.size()==0)res.push_back(-1);
    else if(s.size() > 0 && s.top() < arr[i])res.push_back(s.top());
    else if(s.size() > 0 && s.top() >= arr[i])
    {
        while(s.size() > 0 && s.top() >= arr[i])
        {
            s.pop();
        }
          if(s.size()==0)res.push_back(-1);
          else
          res.push_back(s.top());
    }
    s.push(arr[i]);
	}
	//reverse resultant vector to get the output
	reverse(res.begin(),res.end());
}


//Display function
void display(int arr[],vector<int>&res,int n)
{
	for (int i = 0; i < n; i++)
	cout << arr[i] << " --> " << res[i] << endl;
}

int main()
{
    //1,3,2,4-->use this example for Next greater Element to Right and left
	int arr[] = {4,5,2,10,8};
	int n = sizeof(arr) / sizeof(arr[0]);

	vector<int>res;
	
// print Next greater Element To Right
// 	printNGEToRight(arr, n,res);
// 	display(arr,res,n);

// print Next greater Element To left	
// 	printNGEToLeft(arr,n,res);
// 	display(arr,res,n);

// print Next smaller Element To left
// printNSEToLeft(arr,n,res);
// display(arr,res,n);
    
// print Next smaller Element To Right
// printNSEToRight(arr,n,res);
// display(arr,res,n);
	
	return 0;
}
